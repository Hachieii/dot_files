" nvim python
let g:python3_host_prog = '/opt/salt/bin/python3.7'
" Plugins {{{
" download vim-plug if it's missing
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
	Plug 'vimsence/vimsence'
	Plug 'sheerun/vim-polyglot'
	Plug 'Yggdroot/indentLine'
	Plug 'psliwka/vim-smoothie'
	Plug 'tpope/vim-commentary'
	Plug 'preservim/nerdtree'
call plug#end()
" }}}

let mapleader = " "

" Keybinding
map <leader>y :w !xclip -selection clipboard<CR><ESC>
map <leader>Y :'<,'>w !xclip -selection clipboard<CR><ESC>
map <leader>t :t.<CR><ESC>
map <TAB> gt
autocmd filetype cpp nnoremap <leader>o :w <bar> !g++ -std=c++17 % -o %:r<CR>
autocmd filetype cpp nnoremap <leader>p :!./%:r<CR>
autocmd filetype py nnoremap <leader>p :!python % <CR>
nnoremap <S-TAB> gT

set hls
set is
"set cb=unnamedplus
set gfn=Fixedsys:h10
set ts=4
set sw=4
set si

set nocompatible            " use new features whenever they are available
set nomodeline

syntax on
filetype on
filetype plugin on
filetype plugin indent on
set nu                      " show line number
set tabstop=4
set shiftwidth=4
set autoindent
set expandtab
" Automatically update changed files (but need to focus on the file)
set autoread
set hidden " needed for languageclient

set background=dark
colorscheme iceberg
set softtabstop=4
set bs=2                    " backspace should work as we expect
set history=50              " remember last 50 commands
set ruler                   " show cursor position in bottom line
set hlsearch                " highlight search result
" y and d put stuff into system clipboard (so that other apps can see it)
" set clipboard=unnamed,unnamedplus
"set mouse=a                " enable mouse. At least this should work for iTerm
set textwidth=0
" Open new split to right / bottom
set splitbelow
set splitright
set foldlevel=20
" Disable Ex mode.
nnoremap Q <Nop>
" Copy multiple times: gv to reselect and y to copy again.
xnoremap p pgvy
" }}}

" Misc {{{
set autoread                " auto re-read changes outside vim
set autowrite               " auto save before make/execute
set pastetoggle=<F10>
set showcmd
set timeout                 " adjust timeout for mapped commands
set timeoutlen=1200

set visualbell
set noerrorbells
set foldmethod=marker
" }}}

" Display related: {{{
set display+=lastline       " Show everything you can in the last line (intead of stupid @@@)
set display+=uhex           " Show chars that cannot be displayed as <13> instead of ^M
set colorcolumn=72          " For HRT, max width = 72 for commit messages
" }}}

" Searching {{{
set incsearch               " show first match when start typing
set ignorecase              " default should ignore case
set smartcase               " use case sensitive if I use uppercase
" }}}

" Shortcuts {{{
nnoremap <leader>vs :vs <C-R>=expand("%:p:h") . '/' <CR><CR>
" }}}

" vimrc file config {{{
function! VIMSET()
		set foldmethod=marker
		set nowrap
endfunction
autocmd FileType zsh,vim call VIMSET()
" }}}

" Auto complete {{{
function! MyTabCompletion()
		if col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
				return "\<C-P>"
		else
				return "\<Tab>"
		endif
endfunction
inoremap <Tab> <C-R>=MyTabCompletion()<CR>
" }}}

"set nu
" augroup numbertoggle
" 		autocmd!
" 		autocmd BufEnter,FocusGained,InsertLeave * set rnu
" 		autocmd BufLeave,FocusLost,InsertEnter * set nornu
" augroup END

set diffexpr=MyDiff()
function MyDiff()
	let opt = '-a --binary '
	if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
	if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
	let arg1 = v:fname_in
	if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
	let arg1 = substitute(arg1, '!', '\!', 'g')
	let arg2 = v:fname_new
	if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
	let arg2 = substitute(arg2, '!', '\!', 'g')
	let arg3 = v:fname_out
	if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
	let arg3 = substitute(arg3, '!', '\!', 'g')
	if $VIMRUNTIME =~ ' '
		if &sh =~ '\<cmd'
			if empty(&shellxquote)
				let l:shxq_sav = ''
				set shellxquote&
			endif
			let cmd = '"' . $VIMRUNTIME . '\diff"'
		else
			let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
		endif
	else
		let cmd = $VIMRUNTIME . '\diff'
	endif
	let cmd = substitute(cmd, '!', '\!', 'g')
	silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
	if exists('l:shxq_sav')
		let &shellxquote=l:shxq_sav
	endif
endfunction
